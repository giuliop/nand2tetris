// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    static int keyMem, backspace, newline;
    static String buffer;
    static int bufMaxLen;

    /** Initializes the keyboard. */
    function void init() {
        let keyMem = 24576;
        let newline = 128;
        let backspace = 129;
        let bufMaxLen = 250;
        let buffer = String.new(bufMaxLen);
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(keyMem);
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var int key;
        let key = 0;
        while (key = 0) {
            let key = Keyboard.keyPressed();
        }
        while (~(Keyboard.keyPressed() = 0)) {
        }
        if (key = backspace) {
            return key;
        }
        do Output.printChar(key);
        return key;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var int key;
        let key = 0;
        do Output.printString(message);
        while (true) {
            let key = Keyboard.readChar();
            if ((key = newline) | (buffer.length() = bufMaxLen)) {
                return Keyboard.emptyBuffertoString();
            }
            if (key = backspace) {
                if (buffer.length() > 0) {
                    do Output.backSpace();
                    do buffer.eraseLastChar();
                }
            } else {
                do buffer.appendChar(key);
            }
        }
        return "";  
    }   


    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var int key;
        var String s;
        let key = 0;
        do Output.printString(message);
        while (true) {
            let key = Keyboard.readChar();
            if ((key = newline) | (buffer.length() = 6)) {  // max length is sign and 5 digits
                let s = Keyboard.emptyBuffertoString();
                return s.intValue();
            }
            if (key = backspace) {
                if (buffer.length() > 0) {
                    do Output.backSpace();
                    do buffer.eraseLastChar();
                }
            } else {
                do buffer.appendChar(key);
            }
        }
    return 0;
    }   

    /** Creates a new string copying buffer's content into it and returns the
     *string; the buffer is left empty
     */
    function String emptyBuffertoString() {
        var String s;
        var int j, len;
        let len = buffer.length();
        let s = String.new(len);
        let j = 0;
        while (j < len) {
            do s.appendChar(buffer.charAt(j));
            let j = j + 1;
        }
        while (len > 0) {
            do buffer.eraseLastChar();
            let len = len - 1;
        }
        return s;
    }
}
