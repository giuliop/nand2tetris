// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    static int keyMem, backspace, newline;
    static Array buffer;

    /** Initializes the keyboard. */
    function void init() {
        let keyMem = 24576;
        let newline = 128;
        let backspace = 129;
        let buffer = Array.new(250);
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(keyMem);
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var int key;
        let key = 0;
        while (key = 0) {
            let key = Keyboard.keyPressed();
        }
        while (~(Keyboard.keyPressed() = 0)) {
        }
        if (key = newline) {
            return key;
        }
        if (key = backspace) {
            return key;
        }
        do Output.printChar(key);
        return key;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String s;
        var int key, len, j;
        let key = 0;
        let len = 0;
        let j = 0;
        do Output.printString(message);
        while (true) {
            let key = Keyboard.readChar();
            if (key = newline) {
                let s = String.new(len);
                while (j < len) {
                    do s.appendChar(buffer[j]);
                    let j = j + 1;
                }
                do Output.println();
                return s;
            }
            if (key = backspace) {
                if (len > 0) {
                    do Output.backSpace();
                    let len = len - 1;
                }
            } else {
                let buffer[len] = key;
                let len = len + 1;
            }
        }
        return "";
    }   


    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var int key, j, len, factor, sign;
        let key = 0;
        let len = 0;
        do Output.printString(message);
        while (true) {
            let key = Keyboard.readChar();
            if (key = newline) {
                let j = 0;
                if ((len > 0) & (buffer[j] = 45)) {  // 45 is '-'
                    let sign = -1;
                    let j = 1;
                } else {
                    let sign = 1;
                }
                while (j < len) {
                    let key = buffer[j];
                    if ((key > 47) & (key < 58)) {  // if is digit
                        let buffer[j] = buffer[j] - 48;
                    } else {
                        let len = j;
                    }
                    let j = j + 1;
                }
                let key = 0;
                let factor = 1;
                if (sign = -1) {
                    let j = 1;
                } else {
                    let j = 0;
                }
                while (len > j) {
                    let key = key + (buffer[len-1] * factor);
                    let factor = factor * 10;
                    let len = len - 1;
                }
                do Output.println();
                return key * sign;
            }
            if (key = backspace) {
                if (len > 0) {
                    do Output.backSpace();
                    let len = len - 1;
                }
            } else {
                let buffer[len] = key;
                let len = len + 1;
            }
        }
    return 0;
    }   
}
