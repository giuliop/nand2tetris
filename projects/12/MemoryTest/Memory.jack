// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static Array freeList;
    static int length, next; // to indicate the array position inside freeList

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let length = 0;
        let next = 1;
        let freeList = 2048;           // heap memory start
        let freeList[length] = 14334;  // heap available memory words
        let freeList[next] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array block, lastBlock, newBlock;
        if (size < 1) {
            do Sys.error(5);
        }
        if (freeList = null) {
            do Sys.error(6);
        }
        let block = freeList;
        let lastBlock = null;
        while (true) {
            // first we check if we can allocate part of the next free block,
            // that is at least two cells stay (one for length, one for next)
            // after we allocate size + 1 (plus one to store length)
            if (block[length] > size + 2) {
                let newBlock = block + size + 1;
                let newBlock[length] = block[length] - size - 1;
                let newBlock[next] = block[next];
                if (lastBlock = null) {
                    let freeList = newBlock;
                } else {
                    let lastBlock[next] = newBlock;
                }
                let block[length] = size + 1;
                return block + 1;
            }
            // otherwise we check if we can allocate the entire next free block
            if (block[length] > size) {
                if (lastBlock = null) {
                    let freeList = block[next];
                } else {
                    let lastBlock[next] = block[next];
                }
                let block[length] = size + 1;
                return block + 1;
            }
            // finally we try to move to another block or return error if no
            // more are available
            if (block[next] = null) {
                do Sys.error(6);
            } else {
                let lastBlock = block;
                let block = block[next];
            }
        }
        return null;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[0] = freeList;
        let freeList = o - 1;
        return;
    }    
}
