/**
 * Implements the Pong game.
 * One player represented by a stick at the left edge of the screen
 * must catch a ball boucing around. Every time the ball reaches the screen side
 * behind the player he loses a point; when a player loses 10 points the game is
 * over
 * Key controls:
 *      z - reset the score and restart a game
 *      up arrow - move stick up
 *      down arrow - move stick down
 *      q - quit the game
 */
 
class PongGame {
    field Ball ball;
    field Player player;
    field Score score;
    field boolean goal;  

    static int playerSizeX;
    static int playerSizeY;
    static int ballRadius;
    static int ballX;
    static int ballY;
    static int playerDistanceFromWall;
    static int scoreX;
    static int scoreY;

    /** Init the static variables of the game */
    function void initGame() {
        let playerSizeX = 10;
        let playerSizeY = 50;
        let ballRadius = 20;
        let ballX = 255;
        let ballY = 127;
        let playerDistanceFromWall = 10;
        let scoreX = 450;
        let scoreY = 5;
    }

    /** Constructs a new Pong game */
    constructor PongGame new() {
        do initGame();
        let ball = Ball.new(ballRadius, ballX, ballY, 2, -2, this);

        let player = Player.new(playerDistanceFromWall, 127 - (playerSizeY / 2),
                            playerSizeX, playerSizeY);

        let score = Score.new();
        let goal = false;
        do Output.moveCursor(scoreX, scoreY);
        do Output.printString("Goals : ")
        do Output.moveCursor(scoreX, scoreY + 5);
        do Output.printString("q to quit, z to restart")
        do printScore();
        return this;
    }

    /** Prints the score */
    method void printScore() {
        do Output.moveCursor(scoreX + 9, scoreY);
        do Output.printInt(do score.getPoints());
        do Output.printString("     ");
        return;
    }

    /** Disposes this game. */
    method void dispose() {
        do ball.dispose();
        do player.dispose();
        do score.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Checks for collisions with of the ball with the bottom or ceiling of the
     * screen by taking as input the y coordinate of the ball and returns true for
     * collision and false if no collision
     */
    method boolean collisionY(int y) {
        return ((y < 0) | (y > 255));
    }

    /** Checks for collisions with of the ball with the player, the right edge or
     * the left edge of the screen (a score), by taking as input the x,y coordinates 
        return this;
    }

    /** Prints the score */
    method void printScore() {
        do Output.moveCursor(scoreX + 9, scoreY);
        do Output.printInt(do score.getPoint());
        do Output.printString("     ");
        return;
    }

    /** Disposes this game. */
    method void dispose() {
        do ball.dispose();
        do player.dispose();
        do score.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Checks for collisions with of the ball with the bottom or ceiling of the
     * screen by taking as input the y coordinate of the ball and returns true for
     * collision and false if no collision
     */
    method boolean collisionY(int y, int radius) {
        return (((y - radius) < 0) | ((y + radius) > 255));
    }

    /** Checks for collisions with of the ball with the player, the right edge or
     * the left edge of the screen (a score), by taking as input the x,y coordinates 
     * of the ball and returns true for collision and false if no collision, taking
     * care of setting the goal field to true if a score has happened
     */
    method boolean collisionX(x, y, radius) {
        if ((x - radius) < 0) {
            let goal = true;
        }
        else {
            if ((((y + radius) > player.y) &
                ((y - radius) < (player.y + playerSizeY)) &
                ((x - radius) < (p1.x + playerSizeX)) &
                ((x + radius) > (p1.x))) | ((x + radius) > 511)) {
                    return true;
            }
        }
        return false;
    }

    /** Increments the score and restart the ball */
    method void goalScored() {
        do score.changeScore(1);
        do printScore();
        do ball.restart(ballX, ballY);
        ball.move();
    }

    /** Runs the game: handles the user's inputs and moves the ball and the
     * players accordingly
     */
    method void run() {
        var char key;  // the key currently pressed by the user
        var boolean exit, restart;
        var int direction;
        let exit = false;

        while (~exit) {
            let direction = 0;
            if restart {
                do score.reset();
                do printScore();
                do ball.restart(ballX, ballY);
                let restart = false;
            }
            // waits for a key to be pressed
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do ball.move();
                if goal {
                    do goalScored();
                }
            }
            if (key = 81)  { let exit = true; }     // q key
            if (key = 90)  { let restart = true; } // z key
            if (key = 131) { let direction = 1; }   // up arrow
            if (key = 133) { let direction = -1; }   // down arrow

            // waits for the key to be released
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                if (~(direction = 0)) {
                    do player.move(direction);
                }
                do ball.move();
                if goal {
                    do goalScored();
                }
            }
        } // while
        return;
    }
}
