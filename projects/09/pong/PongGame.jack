/**
 * Implements the Pong game.
 * One player represented by a stick at the left edge of the screen
 * must catch a ball boucing around
 * Key controls:
 *      up arrow - move stick up
 *      down arrow - move stick down
 *      q - quit the game
 */
 
class PongGame {
    field Ball ball;
    field Player player;
    field boolean goal;  

    static int playerSizeX;
    static int playerSizeY;
    static int ballRadius;
    static int ballX;
    static int ballY;
    static int ballDX;
    static int ballDY;
    static int playerDistanceFromWall;
    static int delay;

    /** Init the static variables of the game */
    function void initGame() {
        let playerSizeX = 10;
        let playerSizeY = 40;
        let ballRadius = 5;
        let ballX = 255;
        let ballY = 127;
        let ballDX = 1;
        let ballDY = -1;
        let playerDistanceFromWall = 10;
        let delay = 5;
        return;
    }

    /** Constructs a new Pong game */
    constructor PongGame new() {
        do PongGame.initGame();
        let ball = Ball.new(ballRadius, ballX, ballY, ballDX, ballDY, this);

        let player = Player.new(playerDistanceFromWall, 127 - (playerSizeY / 2),
                            playerSizeX, playerSizeY);

        let goal = false;
        return this;
    }

    /** Disposes this game. */
    method void dispose() {
        do ball.dispose();
        do player.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Checks for collisions with of the ball with the bottom or ceiling of the
     * screen by taking as input the y coordinate of the ball and returns true for
     * collision and false if no collision
     */
    method boolean collisionY(int y, int radius) {
        return (((y - radius) < 1) | ((y + radius) > 254));
    }

    /** Checks for collisions with of the ball with the player, the right edge or
     * the left edge of the screen (a score), by taking as input the x,y coordinates 
     * of the ball and returns true for collision and false if no collision, taking
     * care of setting the goal field to true if a score has happened
     */
    method boolean collisionX(int x, int y, int radius) {
        var int playerX, playerY;
        let playerX = player.X();
        let playerY = player.Y();
        if ((x - radius) < 1) {
            let goal = true;
            return false;
        }
        if (((y + radius) > playerY) &
                ((y - radius) < (playerY + playerSizeY)) &
                ((x - radius) = (playerX + playerSizeX))) {
            return true;
        }
        if ((x + radius) > 510) {
            return true;
        }
        return false;
    }

    /** Increments the score and restart the ball */
    method void goalScored() {
        do ball.restart(ballX, ballY);
        do ball.draw();
        do Sys.wait(1500);
        let goal = false;
        return;
    }

    /** Runs the game: handles the user's inputs and moves the ball and the
     * players accordingly
     */
    method void run() {
        var char key;  // the key currently pressed by the user
        var boolean exit;
        var int direction;
        let exit = false;

        while (~exit) {
            let direction = 0;
            // waits for a key to be pressed
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do ball.move();
                do ball.draw();
                if (goal) {
                    do goalScored();
                }
                do Sys.wait(delay);  // delays the next movement
            }
            if (key = 81)  { let exit = true; }     // q key
            if (key = 131) { let direction = -1; }   // up arrow
            if (key = 133) { let direction = 1; }   // down arrow

            // waits for the key to be released
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                if (~(direction = 0)) {
                    do player.move(direction);
                }
                do ball.move();
                do ball.draw();
                if (goal) {
                    do goalScored();
                }
                do Sys.wait(delay);  // delays the next movement
            }
        } // while
        return;
    }
}
